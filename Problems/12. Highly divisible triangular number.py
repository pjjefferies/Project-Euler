# -*- coding: utf-8 -*-
"""
Project Euler

Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

from time import time

def findAllFactors(aNumber):
    #print("In findAllFactors with number:", number)
    if aNumber % 2 == 0:
        factors = {1, 2, aNumber, int(aNumber/2)}
        maxAllFactorLimit = int((aNumber/2)-1)
    else:
        factors = {1, aNumber}
        maxAllFactorLimit = int(aNumber-1)
    potentialFactor = 3
    while True:
        if aNumber % potentialFactor == 0:
            factors.add(potentialFactor)
            factors.add(int(aNumber/potentialFactor))
            maxAllFactorLimit = int(aNumber/potentialFactor) - 1
        potentialFactor += 1
        if potentialFactor > maxAllFactorLimit:
            break
    return factors


if __name__ == '__main__':
    startTime = time()
    minNumFactors = 501
    triNum = 1
    maxFactors = 0
    while True:
        triNumFactors = findAllFactors(triNum)
        if len(triNumFactors) > maxFactors:
            maxFactorNum = triNum
            maxFactors = len(triNumFactors)
            maxFactorsList = triNumFactors
        if len(triNumFactors) >= minNumFactors:
            break
        if (triNum) % 1000 == 0:
            print("Tried triNum:", triNum, ". Highest triNum:", maxFactorNum,
                  ". ", maxFactors, "max. factors found.")
        triNum += 1
    totalTime = time() - startTime
    print("The value of the first triangle number to have over 500 factors is", triNum)
    print("Time to find:", totalTime)
